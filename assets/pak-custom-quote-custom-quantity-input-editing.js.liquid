  document.addEventListener('DOMContentLoaded', function(){
    const loaderForMinMaxQuantity = document.getElementById("loader-for-min-max-quantity");
    const quantityInputContainer = document.querySelector(".quantity-input-text-container");
    // const quantityStaticText = document.querySelector(".quantity-input-text-container .quantity-input-heading p");
    
    const projectInfoTextArea = document.querySelector(".project-detail__description textarea");
    const addQuoteButton = document.querySelector("#add-to-quote");
    const inputQuantityNumber = document.querySelector(".quantity-input-items-container input[type='number']");
    const divForHandle = document.getElementById("div-for-product-type");
    const product_type = divForHandle.getAttribute('data-product-type');
    loaderForMinMaxQuantity.classList.remove("hidden");
    inputQuantityNumber.disabled = true;
    quantityInputContainer.classList.add("disable-element");
    projectInfoTextArea.disabled = true;
    addQuoteButton.disabled = true;
    

    const productTypeFromProduct = `${product_type}` || "Default"; // Replace with your product type
// console.log(productTypeFromProduct);
    console.log("hello: ",`${product_type}`);
    async function validateMinMaxQuantity(productTypeFromProduct) {
      const url = `https://www.mlveda.com/ShopifyApps/quotifyTest/productQuantity`;

      // Clear existing options
      // inputQuantityNumber.innerHTML = "";
      

      try {
        const response = await fetch(url, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
      
        const data = await response.json();
        console.log("hello-data: ",`${data}`);
        console.log(data);
        
        const productTypesForQuantityMinMax = data.productTypes;
        // console.log(productTypesForQuantityMinMax);
        // let staticText = '';
        // productTypesForQuantityMinMax.forEach((type) => {
        //   if (type.productType === productTypeFromProduct) {
        //     inputQuantityNumber.min = type.min || 1;
        //     // inputQuantityNumber.max = type.max || 1;
        //     // staticText = ` Minimum order starts at ${type.min}.`
        //     inputQuantityNumber.placeholder += type.min || "";
        //     // quantityStaticText.textContent += staticText; 
        //   }
        // });

        const matchedType = productTypesForQuantityMinMax.find((type) => {
          return type.productType === productTypeFromProduct;
        });
        console.log('match: ',matchedType);
        // if (matchedType) {
        //   inputQuantityNumber.min = matchedType.min || 1;
        //   inputQuantityNumber.placeholder += matchedType.min || "";
        // } else {
        //   inputQuantityNumber.min = 1;
        //   inputQuantityNumber.placeholder += 1;
        // }

      } catch (error) {
        console.error("Error fetching product quantities:", error);
      } finally {
        loaderForMinMaxQuantity.classList.add("hidden"); // Hide loader
        inputQuantityNumber.disabled = false;
        quantityInputContainer.classList.remove("disable-element");
        projectInfoTextArea.disabled = false;
        addQuoteButton.disabled = false;
        
      }
    }

    validateMinMaxQuantity(productTypeFromProduct);

        
    const quantityAddButton = document.getElementById('add-new-quantity');
    const addedQuantitiesContainer = document.querySelector('.added-quantity-container');
    const errorDiv = document.querySelector(".quantity-input-error-div");
    const quantityNumberInput = document.getElementById('product-item-quantity');
    
    // Add padding class if there are existing children
    if (addedQuantitiesContainer.querySelectorAll('.added-quantity-container').length > 0 && !addedQuantitiesContainer.classList.contains('class-for-padding')) {
      addedQuantitiesContainer.classList.add('class-for-padding');
    }
    
    // Function to add quantity if valid and not duplicate
   function addQuantityIfValid() {
    const minValue = parseInt(quantityNumberInput.min) || 1;
    // const maxValue = parseInt(quantityNumberInput.max);
    const inputValue = quantityNumberInput.value.trim();
  
    // Check if input is empty or not a number
    if (inputValue === "" || isNaN(inputValue)) {
      errorDiv.innerHTML = `<span>Please add quantity.</span>`;
      errorDiv.style.display = "block";
      return;
    }
  
    const parsedValue = parseInt(inputValue);
  
    // Check for valid range
    if (parsedValue >= minValue) {
      // Check for duplicate
      const existingQuantities = addedQuantitiesContainer.querySelectorAll('label');
      const isDuplicate = Array.from(existingQuantities).some(label => parseInt(label.textContent) === parsedValue);
  
      if (isDuplicate) {
        errorDiv.innerHTML = `<span>This quantity has already been added.</span>`;
        errorDiv.style.display = "block";
        return;
      }
  
      // Add new quantity
      const newQuantity = document.createElement('div');
      newQuantity.innerHTML = `<label>${parsedValue}</label><button>x</button>`;
      addedQuantitiesContainer.appendChild(newQuantity);
  
      if (!addedQuantitiesContainer.classList.contains('class-for-padding')) {
        addedQuantitiesContainer.classList.add('class-for-padding');
      }
  
      quantityNumberInput.value = '';
      errorDiv.innerHTML = "";
      errorDiv.style.display = "none";
    } else {
      errorDiv.innerHTML = `<span>You can add quantity greater or equal to ${minValue} for this product.</span>`;
      errorDiv.style.display = "block";
    }
  }

    
    // On button click
    quantityAddButton.addEventListener('click', addQuantityIfValid);
    
    // On Enter key
    quantityNumberInput.addEventListener('keydown', function (event) {
      if (event.key === 'Enter') {
        event.preventDefault();
        addQuantityIfValid();
      }
    
      // Prevent 'e', '+', '-'
      if (['e', 'E', '+', '-'].includes(event.key)) {
        event.preventDefault();
      }
    });
    
    // Prevent pasting invalid characters
    quantityNumberInput.addEventListener('paste', function (event) {
      const pasted = (event.clipboardData || window.clipboardData).getData('text');
      if (/[eE+\-]/.test(pasted)) {
        event.preventDefault();
      }
    });



    addedQuantitiesContainer.addEventListener('click', function(e) {
      // Check if the clicked element is a button and its text is 'x'
      if (e.target.tagName === 'BUTTON' && e.target.textContent.trim() === 'x') {
        const quantityDiv = e.target.closest('div'); // Get the parent <div> of the button
        if (quantityDiv && addedQuantitiesContainer.contains(quantityDiv)) {
          addedQuantitiesContainer.removeChild(quantityDiv); // Remove the div
    
          // Check if no more child divs are left
          if (addedQuantitiesContainer.querySelectorAll('div').length === 0) {
            addedQuantitiesContainer.classList.remove('class-for-padding');
          }
        }
      }
    });

    
  });



    