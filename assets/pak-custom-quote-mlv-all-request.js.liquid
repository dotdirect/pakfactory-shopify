document.addEventListener("DOMContentLoaded", (event) => {
  if (customerEmail) {

    
    const tbody = document.querySelector('#tab1 tbody');
    const paginationDiv = document.getElementById("pagination");
    const toolTipInfoDiv = document.getElementById("tooltipInfo");
    const statusPendingText = toolTipInfoDiv.getAttribute('pending-status'); 
    const statusInProgressText = toolTipInfoDiv.getAttribute('inProgress-status'); 
    const statusConvertedText = toolTipInfoDiv.getAttribute('converted-status'); 
    const specialistName = document.getElementById("account-specialist-name");
    const specialistEmail = document.getElementById("account-specialist-email");
    const specialistContact = document.getElementById("account-specialist-contact");
    const assignedSection = document.getElementById("accounts-specialist-assigned");
    const notAssignedSection = document.getElementById("accounts-specialist-not-assigned");
    const toolTipIcon = `<svg fill="#000000" viewBox="0 0 36 36" version="1.1" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path class="clr-i-solid clr-i-solid-path-1" d="M18,2.1a16,16,0,1,0,16,16A16,16,0,0,0,18,2.1Zm-.1,5.28a2,2,0,1,1-2,2A2,2,0,0,1,17.9,7.38Zm3.6,21.25h-7a1.4,1.4,0,1,1,0-2.8h2.1v-9.2H15a1.4,1.4,0,1,1,0-2.8h4.4v12h2.1a1.4,1.4,0,1,1,0,2.8Z"></path> <rect x="0" y="0" width="36" height="36" fill-opacity="0"></rect> </g></svg>`;
    const right_icon = `<svg height="64px" width="64px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 410.258 410.258" xml:space="preserve" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <polygon style="fill:#000000;" points="144.206,0 112.206,24 248.052,205.129 112.206,386.258 144.206,410.258 298.052,205.129 "></polygon> </g></svg>`;
    const left_icon = `<svg height="64px" width="64px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 410.258 410.258" xml:space="preserve" fill="#000000" transform="matrix(-1, 0, 0, 1, 0, 0)"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <polygon style="fill:#000000;" points="144.206,0 112.206,24 248.052,205.129 112.206,386.258 144.206,410.258 298.052,205.129 "></polygon> </g></svg>`;



    let accountSpecialistDataAddedFlag = false;
    function renderAccountSpecialist(potentialOwner, email, contact) {
      if (potentialOwner) {
        assignedSection.style.display = "flex";
        notAssignedSection.style.display = "none";
        specialistName.textContent = potentialOwner || '-';
        specialistEmail.textContent = email || '';
        specialistContact.textContent = contact || '';
      } else {
        assignedSection.style.display = "none";
        notAssignedSection.style.display = "flex";
        specialistName.textContent = '';
        specialistEmail.textContent = '';
        specialistContact.textContent = '';
      }
    }


  const allRequestTableLoader = document.getElementById("all-request-table-loader");
    

    const pageSize = 4;
    let currentPage = 1;
    let totalPages = 1;
    function fetchQuotes(offset = 0) {
      allRequestTableLoader.classList.remove('hidden');

      const apiUrl = `https://www.mlveda.com/ShopifyApps/quotifyTest/quotes?customerEmail=${customerEmail}&offset=${offset}&limit=${pageSize}`;


      fetch(apiUrl)
        .then(res => res.json())
        .then(data => {
          const quotes = data.quotes;
          const pagination = data.pagination;

          // Update total pages and current page
          totalPages = pagination.totalPages;
          currentPage = pagination.currentPage;

          tbody.innerHTML = '';
       if (quotes.length === 0) {
          tbody.innerHTML = `<tr><td colspan="4" style="text-align:center;">You have not made any quote request yet.</td></tr>`;
          renderAccountSpecialist(null); // clear specialist
          allRequestTableLoader.classList.add('hidden');
          paginationDiv.innerHTML = ''; // Clear pagination
          return;
        }
          quotes.forEach((quote,index) => {
            const {
              quoteId,
              potentialStatus,
              potentialOwner,
              potentialOwnerEmail,
              potentialContact,
              customer: { firstName, lastName, email, LeadOwner },
              variants,
              totalAmount,
              status,
              createdAt
            } = quote;

            const productNames = variants.map(variant =>
              `
                <span class="tag">${variant.productName}</span><br>
                <span class="tag sku">${variant.sku}</span>              
              `
            );

            // const productImg = `<img src="${variants[0]?.imageUrl || ''}" height="70" width="70"/>`;
         const productImg = variants[0]?.imageUrl 
          ? `<div style="display:flex;"><img src="${variants[0].imageUrl}" height="60" width="60"/></div>
          
          ` 
          : '';

            let statusText = '';
            if (potentialStatus === 'Pending') {
              statusText = statusPendingText;
            } else if (potentialStatus === 'In Progress') {
              statusText = statusInProgressText;
            } else if (potentialStatus === 'Converted to Order') {
              statusText = statusConvertedText;
            }
              
           if (potentialOwner) {
             if(!accountSpecialistDataAddedFlag){ 
              renderAccountSpecialist(potentialOwner, potentialOwnerEmail, potentialContact);
               accountSpecialistDataAddedFlag=true;
             }
            } else if(LeadOwner){
             if(!accountSpecialistDataAddedFlag){ 
              renderAccountSpecialist(LeadOwner, potentialOwnerEmail, potentialContact);
               accountSpecialistDataAddedFlag=true;
             }
            }

            const createdAtDate = new Date(createdAt);
            const formattedDate = createdAtDate.toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td><a href="#" class="custom-link">${quoteId}</a></td>
              <td>
                <div style="display:flex; gap:20px; align-items:center;">
                  ${productImg}
                  <div>
                    ${productNames[0] || '-'}
                  </div>
                </div>
                          <div class="more-text">${productNames.length > 1 ? `${productNames.length - 1} more` : ''}</div>
              </td>
              <td><div class="status" data-status="${potentialStatus}">${potentialStatus} <div class="tooltip-svg-wrapper" style="position:relative; display:flex;"><div class="status-tool-tip">${statusText}</div>${toolTipIcon}</div></div></td>
              <td>${formattedDate}</td>
            `;
            tbody.appendChild(tr);
          });

          renderPagination();
          NextLevelAPI();

          allRequestTableLoader.classList.add('hidden');
          
         

        })
        .catch(err => console.error('Error fetching data:', err));
    }

  const searchInput = document.querySelector('#search-quote-request');
  searchInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      fetchQuotesBySearch(0);
    }
  });

    const pageSizeForSearch = 4;
    let currentPageForSearch = 1;
    let totalPagesForSearch = 1;
  function fetchQuotesBySearch(offset = 0) {
  const searchInput = document.querySelector('#search-quote-request');
  const searchTerm = searchInput.value.trim();

  if (!searchTerm) {
    fetchQuotes(0); // fallback to default list if input is empty
    return;
  }

  allRequestTableLoader.classList.remove('hidden');
  tbody.innerHTML = '';

  const apiUrl = `https://www.mlveda.com/ShopifyApps/quotifyTest/quotes?customerEmail=${customerEmail}&search=${encodeURIComponent(searchTerm)}&offset=${offset}&limit=${pageSize}`;

  fetch(apiUrl)
    .then(res => res.json())
    .then(data => {
      const quotes = data.quotes;
      const pagination = data.pagination;

    totalPagesForSearch = pagination.totalPages;
    currentPageForSearch = pagination.currentPage;


      if (quotes.length === 0) {
        tbody.innerHTML = `<tr><td colspan="4" style="text-align:center;">No quotes found for "${searchTerm}"</td></tr>`;
        renderAccountSpecialist(null); // clear specialist
        allRequestTableLoader.classList.add('hidden');
        paginationDiv.innerHTML = ''; // Clear pagination
        return;
      }

      quotes.forEach((quote, index) => {
        const {
          quoteId,
          potentialStatus,
          potentialOwner,
          potentialOwnerEmail,
          potentialContact,
          customer: { firstName, lastName, email },
          variants,
          totalAmount,
          status,
          createdAt
        } = quote;

        const productNames = variants.map(variant =>
          `<span class="tag">${variant.productName}</span><br><span class="tag sku">${variant.sku}</span>`
        );

        const productImg = variants[0]?.imageUrl 
          ? `<div style="display:flex;"><img src="${variants[0].imageUrl}" height="60" width="60"/></div>` 
          : '';

        let statusText = '';
        if (potentialStatus === 'Pending') {
          statusText = statusPendingText;
        } else if (potentialStatus === 'In Progress') {
          statusText = statusInProgressText;
        } else if (potentialStatus === 'Converted to Order') {
          statusText = statusConvertedText;
        }

        const createdAtDate = new Date(createdAt);
        const formattedDate = createdAtDate.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });

        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td><a href="#" class="custom-link">${quoteId}</a></td>
          <td>
            <div style="display:flex; gap:20px; align-items:center;">
              ${productImg}
              <div>${productNames[0] || '-'}</div>
            </div>
            <div class="more-text">${productNames.length > 1 ? `${productNames.length - 1} more` : ''}</div>
          </td>
          <td><div class="status" data-status="${potentialStatus}">${potentialStatus} 
            <div class="tooltip-svg-wrapper" style="position:relative; display:flex;">
              <div class="status-tool-tip">${statusText}</div>${toolTipIcon}
            </div>
          </div></td>
          <td>${formattedDate}</td>
        `;
        tbody.appendChild(tr);
      });

      renderPaginationForSearch();
      NextLevelAPI();
      allRequestTableLoader.classList.add('hidden');
    })
    .catch(err => {
      console.error('Error fetching search data:', err);
      allRequestTableLoader.classList.add('hidden');
    });
}


    const seachButton = document.querySelector('.input-container svg');
    seachButton.addEventListener('click',fetchQuotesBySearch);
function renderPaginationForSearch() {
  paginationDiv.innerHTML = '';

  const wrapper = document.createElement('div');
  wrapper.className = 'pagination-wrapper';

  // Prev Button
  const prevBtn = document.createElement('button');
  prevBtn.innerHTML = `${left_icon}<span>Previous</span>`;
  prevBtn.disabled = currentPageForSearch === 1;
  prevBtn.className = 'page-btn prev-btn';
  prevBtn.style.display = 'flex';
  prevBtn.style.alignItems = 'center';
  prevBtn.style.gap = '5px';
  prevBtn.addEventListener('click', () => {
    if (currentPageForSearch > 1) {
      const offset = (currentPageForSearch - 2) * pageSizeForSearch;
      fetchQuotesBySearch(offset);
    }
  });

  const pageNumbersDiv = document.createElement('div');
  pageNumbersDiv.className = 'page-numbers';

  const addPageButton = (page) => {
    const btn = document.createElement('button');
    btn.innerText = page;
    btn.className = 'page-btn';
    if (page === currentPageForSearch) btn.classList.add('active');
    btn.addEventListener('click', () => {
      const offset = (page - 1) * pageSizeForSearch;
      fetchQuotesBySearch(offset);
    });
    pageNumbersDiv.appendChild(btn);
  };

  const addDots = () => {
    const dots = document.createElement('span');
    dots.className = 'dots';
    dots.innerText = '...';
    pageNumbersDiv.appendChild(dots);
  };

  // Always show first two pages
  addPageButton(1);
  if (totalPagesForSearch > 1) addPageButton(2);

  // Show ... if needed before middle
  if (currentPageForSearch > 4) {
    addDots();
  }

  // Show middle: currentPage-1, currentPage, currentPage+1
  const startMid = Math.max(3, currentPageForSearch - 1);
  const endMid = Math.min(totalPagesForSearch - 2, currentPageForSearch + 1);
  for (let i = startMid; i <= endMid; i++) {
    if (i !== 1 && i !== 2 && i !== totalPagesForSearch - 1 && i !== totalPagesForSearch) {
      addPageButton(i);
    }
  }

  // Show ... if needed after middle
  if (currentPageForSearch < totalPagesForSearch - 3) {
    addDots();
  }
console.log(totalPagesForSearch);
  // Always show last two pages
if (totalPagesForSearch > 2) {
  if (totalPagesForSearch - 1 > 2) addPageButton(totalPagesForSearch - 1);
  if (totalPagesForSearch > 2) addPageButton(totalPagesForSearch);
}
  // Next Button
  const nextBtn = document.createElement('button');
  nextBtn.innerHTML = `<span>Next</span>${right_icon}`;
  nextBtn.disabled = currentPageForSearch === totalPagesForSearch;
  nextBtn.className = 'page-btn next-btn';
  nextBtn.style.display = 'flex';
  nextBtn.style.alignItems = 'center';
  nextBtn.style.gap = '5px';
  nextBtn.addEventListener('click', () => {
    if (currentPageForSearch < totalPagesForSearch) {
      const offset = currentPageForSearch * pageSizeForSearch;
      fetchQuotesBySearch(offset);
    }
  });

  wrapper.appendChild(prevBtn);
  wrapper.appendChild(pageNumbersDiv);
  wrapper.appendChild(nextBtn);
  paginationDiv.appendChild(wrapper);
}

function renderPagination() {
  paginationDiv.innerHTML = '';

  const wrapper = document.createElement('div');
  wrapper.className = 'pagination-wrapper';

  // Prev Button
  const prevBtn = document.createElement('button');
  prevBtn.innerHTML = `${left_icon}<span>Previous</span>`;
  prevBtn.disabled = currentPage === 1;
  prevBtn.className = 'page-btn prev-btn';
  prevBtn.style.display = 'flex';
  prevBtn.style.alignItems = 'center';
  prevBtn.style.gap = '5px';
  prevBtn.addEventListener('click', () => {
    if (currentPage > 1) {
      const offset = (currentPage - 2) * pageSize;
      fetchQuotes(offset);
    }
  });

  const pageNumbersDiv = document.createElement('div');
  pageNumbersDiv.className = 'page-numbers';

  const addPageButton = (page) => {
    const btn = document.createElement('button');
    btn.innerText = page;
    btn.className = 'page-btn';
    if (page === currentPage) btn.classList.add('active');
    btn.addEventListener('click', () => {
      const offset = (page - 1) * pageSize;
      fetchQuotes(offset);
    });
    pageNumbersDiv.appendChild(btn);
  };

  const addDots = () => {
    const dots = document.createElement('span');
    dots.className = 'dots';
    dots.innerText = '...';
    pageNumbersDiv.appendChild(dots);
  };

  // Always show first two pages
  addPageButton(1);
  if (totalPages > 1) addPageButton(2);

  // Show ... if needed before middle
  if (currentPage > 4) {
    addDots();
  }

  // Show middle: currentPage -1, currentPage, currentPage +1
  const startMid = Math.max(3, currentPage - 1);
  const endMid = Math.min(totalPages - 2, currentPage + 1);
  for (let i = startMid; i <= endMid; i++) {
    if (i !== 1 && i !== 2 && i !== totalPages - 1 && i !== totalPages) {
      addPageButton(i);
    }
  }

  // Show ... if needed after middle
  if (currentPage < totalPages - 3) {
    addDots();
  }

  // Always show last two pages if > 2
if (totalPages > 2) {
  if (totalPages-1 > 2) addPageButton(totalPages - 1);
  if (totalPages > 2) addPageButton(totalPages);
}
  // Next Button
  const nextBtn = document.createElement('button');
  nextBtn.innerHTML = `<span>Next</span>${right_icon}`;
  nextBtn.disabled = currentPage === totalPages;
  nextBtn.className = 'page-btn next-btn';
  nextBtn.style.display = 'flex';
  nextBtn.style.alignItems = 'center';
  nextBtn.style.gap = '5px';
  nextBtn.addEventListener('click', () => {
    if (currentPage < totalPages) {
      const offset = currentPage * pageSize;
      fetchQuotes(offset);
    }
  });

  wrapper.appendChild(prevBtn);
  wrapper.appendChild(pageNumbersDiv);
  wrapper.appendChild(nextBtn);
  paginationDiv.appendChild(wrapper);
}


    fetchQuotes(0); // initial call for page 1

    document.getElementById("back").addEventListener("click", function () {
      document.getElementsByClassName("first_half")[0].style.display = "block";
      document.getElementsByClassName("last")[0].style.display = "none";
    });
  }
});



  function NextLevelAPI() {
  let buttons = document.getElementsByClassName("custom-link");

  for (let i = 0; i < buttons.length; i++) {
    buttons[i].addEventListener("click", function () {
      document.querySelector(".first_half").style.display = "none";
      document.querySelector(".last").style.display = "flex";

      const quoteId = this.textContent.trim();

      const loader = document.getElementById("loader");
      loader.style.display = "block";
      document.getElementsByClassName("mid-lav")[0].style.opacity = "0";
      // document.getElementsByClassName("mid-lav")[1].style.opacity = "0";
      fetch(`https://www.mlveda.com/ShopifyApps/quotifyTest/quotes/${quoteId}`)
        .then(res => res.json())
        .then(data => {
          const { variants, customer } = data;

          const quoteProductsBlock = document.querySelector('.quote-products-block');
          quoteProductsBlock.innerHTML = ''; // Clear old content


          // Directly loop through each variant
          variants.forEach(v => {
            const eachQuoteProduct = document.createElement("div");
            eachQuoteProduct.className = "each-quote-product";
            let variantBlock = '';
            if (v.name !== v.productName) {
              variantBlock = `
                <div>
                  <label>Variant</label>
                  <p>${v.name}</p>
                </div>
              `;
            }
            
            eachQuoteProduct.innerHTML = `
              <div class="each-quote-product-header">
                <img src="${v.imageUrl}" height="60px" width="60px">
                <div class="quote-product-name-sku">
                  <p class="product-name">${v.productName}</p>
                  <p class="sku">SKU: ${v.sku}</p>
                </div>
              </div>
              <div class="each-quote-product-details">
                <div class="each-quote-product-details-sub-block">
                  <div>
                    <label>Quantity</label>
                    <p>${Array.isArray(v.quantity) ? v.quantity.join(', ') : v.quantity}</p>
                  </div>
                  ${variantBlock}
                </div>
                <div class="each-quote-product-details-sub-block">
                  <div>
                    <label>Project Information</label>
                    <p>${v.projectInformation}</p>
                  </div>
                </div>
              </div>
            `;

            quoteProductsBlock.appendChild(eachQuoteProduct);
          });

          // Populate customer information
          document.getElementById('quote-id').innerHTML = `${quoteId}`;
          
          document.getElementById("first-name").textContent = `${customer.firstName} ${customer.lastName}` || '-';
          document.getElementById("shipping-first-name").textContent = `${customer.firstName} ${customer.lastName}` || '-';
          document.getElementById("email").textContent = customer.email || '-';
          document.getElementById("phone").textContent = customer.phone || '-';

          if (customer.shippingAddress) {
            document.getElementById("address").textContent = `${customer.shippingAddress.street}, ${customer.shippingAddress.city}, ${customer.shippingAddress.state}, ${customer.shippingAddress.country}, ${customer.shippingAddress.zipCode}.` || '-';
          }
     
        })
        .catch(err => {
          console.error("Error:", err);
        })
        .finally(() => {
          loader.style.display = "none";
          document.getElementsByClassName("mid-lav")[0].style.opacity = "1";
        });
    });
  }
}
